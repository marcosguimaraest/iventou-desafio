generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
}

model Shopper {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products     Product[]
  ShopperEvent ShopperEvent[]
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String
  priceInCents Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shopper   Shopper @relation(fields: [shopperId], references: [id])
  shopperId String

  orderItems OrderItem[]
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner         Owner          @relation(fields: [ownerId], references: [id])
  ownerId       String
  shopperEvents ShopperEvent[] // nova relação
}

model ShopperEvent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  shopper   Shopper @relation(fields: [shopperId], references: [id])
  shopperId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@unique([shopperId, eventId]) // previne duplicidade
}

model Order {
  id           String   @id @default(uuid())
  totalInCents Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  orderItems OrderItem[]
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  priceInCents Int
  status       Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}
